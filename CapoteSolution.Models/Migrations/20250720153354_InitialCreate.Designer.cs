// <auto-generated />
using System;
using CapoteSolution.Models.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CapoteSolution.Models.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250720153354_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CapoteSolution.Models.Entities.Brand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("CapoteSolution.Models.Entities.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ChargeExtras")
                        .HasColumnType("bit");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CopierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ExtraBW")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ExtraColor")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("InvoiceDay")
                        .HasColumnType("int");

                    b.Property<decimal>("MonthlyPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PlanBW")
                        .HasColumnType("int");

                    b.Property<int>("PlanColor")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CopierId")
                        .IsUnique();

                    b.ToTable("Contract");
                });

            modelBuilder.Entity("CapoteSolution.Models.Entities.Copier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IP_Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MachineEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MachineModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("MachineModelId");

                    b.HasIndex("SerialNumber")
                        .IsUnique();

                    b.ToTable("Copiers");
                });

            modelBuilder.Entity("CapoteSolution.Models.Entities.MachineModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("TonerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("TonerId");

                    b.ToTable("MachineModels");
                });

            modelBuilder.Entity("CapoteSolution.Models.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BlackCounter")
                        .HasColumnType("int");

                    b.Property<int?>("BlackDiff")
                        .HasColumnType("int");

                    b.Property<int?>("BlackTonerQty")
                        .HasColumnType("int");

                    b.Property<int>("ColorCounter")
                        .HasColumnType("int");

                    b.Property<int?>("ColorDiff")
                        .HasColumnType("int");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExtraBW")
                        .HasColumnType("int");

                    b.Property<int?>("ExtraColor")
                        .HasColumnType("int");

                    b.Property<Guid>("ServiceReasonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TechnicianId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TicketNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("ServiceReasonId");

                    b.HasIndex("TechnicianId");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("CapoteSolution.Models.Entities.ServiceReason", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ServiceReasons");

                    b.HasData(
                        new
                        {
                            Id = new Guid("548c8566-7fce-45de-947d-d28b25025e66"),
                            Name = "Toner Change"
                        },
                        new
                        {
                            Id = new Guid("0db6547c-e048-48ae-b66b-9d41a8f6ba39"),
                            Name = "Month Counter"
                        },
                        new
                        {
                            Id = new Guid("c24fe1a1-e7a7-4d80-a59a-9d52edf050d0"),
                            Name = "Maintenance"
                        });
                });

            modelBuilder.Entity("CapoteSolution.Models.Entities.Toner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TonerYield")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Model")
                        .IsUnique();

                    b.ToTable("Toners");
                });

            modelBuilder.Entity("CapoteSolution.Models.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CapoteSolution.Models.Entities.Contract", b =>
                {
                    b.HasOne("CapoteSolution.Models.Entities.Copier", "Copier")
                        .WithOne("Contract")
                        .HasForeignKey("CapoteSolution.Models.Entities.Contract", "CopierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Copier");
                });

            modelBuilder.Entity("CapoteSolution.Models.Entities.Copier", b =>
                {
                    b.HasOne("CapoteSolution.Models.Entities.MachineModel", "MachineModel")
                        .WithMany("Copiers")
                        .HasForeignKey("MachineModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MachineModel");
                });

            modelBuilder.Entity("CapoteSolution.Models.Entities.MachineModel", b =>
                {
                    b.HasOne("CapoteSolution.Models.Entities.Brand", "Brand")
                        .WithMany("MachineModels")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CapoteSolution.Models.Entities.Toner", "Toner")
                        .WithMany("MachineModels")
                        .HasForeignKey("TonerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Toner");
                });

            modelBuilder.Entity("CapoteSolution.Models.Entities.Service", b =>
                {
                    b.HasOne("CapoteSolution.Models.Entities.Contract", "Contract")
                        .WithMany("Services")
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CapoteSolution.Models.Entities.ServiceReason", "ServiceReason")
                        .WithMany("Services")
                        .HasForeignKey("ServiceReasonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CapoteSolution.Models.Entities.User", "Technician")
                        .WithMany("Services")
                        .HasForeignKey("TechnicianId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Contract");

                    b.Navigation("ServiceReason");

                    b.Navigation("Technician");
                });

            modelBuilder.Entity("CapoteSolution.Models.Entities.Brand", b =>
                {
                    b.Navigation("MachineModels");
                });

            modelBuilder.Entity("CapoteSolution.Models.Entities.Contract", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("CapoteSolution.Models.Entities.Copier", b =>
                {
                    b.Navigation("Contract")
                        .IsRequired();
                });

            modelBuilder.Entity("CapoteSolution.Models.Entities.MachineModel", b =>
                {
                    b.Navigation("Copiers");
                });

            modelBuilder.Entity("CapoteSolution.Models.Entities.ServiceReason", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("CapoteSolution.Models.Entities.Toner", b =>
                {
                    b.Navigation("MachineModels");
                });

            modelBuilder.Entity("CapoteSolution.Models.Entities.User", b =>
                {
                    b.Navigation("Services");
                });
#pragma warning restore 612, 618
        }
    }
}
