@using CapoteSolution.Web.Paginations
@using CapoteSolution.Web.Interface
@model dynamic

@{
    var paginatedList = Model as IPaginatedList;
    if (paginatedList == null)
    {
        throw new InvalidOperationException("El modelo debe implementar IPaginatedList");
    }

    // Copiar los valores de ruta existentes
    var routeValues = new Dictionary<string, string>();
    foreach (var key in Model.RouteValues.Keys)
    {
        routeValues[key.ToString()] = Model.RouteValues[key]?.ToString();
    }
}

<nav aria-label="Page navigation">
    <ul class="pagination">
        @if (Model.HasPreviousPage)
        {
            <li class="page-item">
                <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.PageIndex - 1)">Anterior</a>
            </li>
        }
        @for (int i = 1; i <= Model.TotalPages; i++)
        {
            <li class="page-item @(i == Model.PageIndex ? "active" : "")">
                <a class="page-link" asp-action="Index" asp-route-pageNumber="@i">@i</a>
            </li>
        }
        @if (Model.HasNextPage)
        {
            <li class="page-item">
                <a class="page-link" asp-action="Index" asp-route-pageNumber="@(Model.PageIndex + 1)">Siguiente</a>
            </li>
        }
    </ul>
</nav>
